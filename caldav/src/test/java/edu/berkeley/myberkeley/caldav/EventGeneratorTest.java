/*

  * Licensed to the Sakai Foundation (SF) under one
  * or more contributor license agreements. See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership. The SF licenses this file
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License. You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  * KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.

 */

package edu.berkeley.myberkeley.caldav;

import net.fortuna.ical4j.model.Calendar;
import net.fortuna.ical4j.model.Component;
import net.fortuna.ical4j.model.component.VEvent;
import net.fortuna.ical4j.model.component.VToDo;
import org.apache.commons.httpclient.URI;
import org.apache.commons.httpclient.URIException;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.text.ParseException;

/**
 * Test used just to populate user vbede's calendar with data. This test doesn't clean up after itself!
 */


@Ignore
public class EventGeneratorTest extends CalDavTests {

  private static final String OWNER = "vbede";

  private static final String SERVER_ROOT = "http://test.media.berkeley.edu:8080";

  private static final String USER_HOME = SERVER_ROOT + "/ucaldav/user/" + OWNER + "/calendar/";

  private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(CalDavConnectorTest.class);

  @Before
  public void setup() throws CalDavException, URIException {
    this.adminConnector = new CalDavConnector("admin", "bedework", new URI(SERVER_ROOT, false), new URI(USER_HOME, false));
  }

  @Test
  @Ignore
  public void cleanup() throws CalDavException {
    deleteAll();
  }

  @Test
  public void putPastEvent() throws CalDavException {
    try {
      Calendar calendar = buildPastEvent("Past event, required");
      this.adminConnector.putCalendar(calendar, OWNER);
    } catch (IOException ioe) {
      LOGGER.error("Trouble contacting server", ioe);
    }
  }

  @Test
  public void putEvent() throws CalDavException {
    try {
      Calendar calendar = buildVevent("Test optional event with a long description");
      this.adminConnector.putCalendar(calendar, OWNER);

      Calendar required = buildVevent("Mandatory event");
      VEvent requiredVevent = (VEvent) required.getComponent(Component.VEVENT);
      requiredVevent.getProperties().add(CalDavConnector.MYBERKELEY_REQUIRED);
      this.adminConnector.putCalendar(required, OWNER);

    } catch (IOException ioe) {
      LOGGER.error("Trouble contacting server", ioe);
    }
  }

  @Test
  public void putArchivedTodo() throws CalDavException {
    try {
      Calendar calendar = buildVTodo("Archived Required Todo");
      VToDo todo = (VToDo) calendar.getComponent(Component.VTODO);
      todo.getProperties().add(CalDavConnector.MYBERKELEY_ARCHIVED);
      this.adminConnector.putCalendar(calendar, OWNER);
    } catch (IOException ioe) {
      LOGGER.error("Trouble contacting server", ioe);
    }
  }

  @Test
  public void putTodo() throws CalDavException, ParseException, URIException {
    try {
      Calendar calendar = buildVTodo("Generated by CalDavTests");
      this.adminConnector.putCalendar(calendar, OWNER);

      Calendar optional = buildVTodo("Optional task");
      VToDo optionalVTodo = (VToDo) optional.getComponent(Component.VTODO);
      optionalVTodo.getProperties().remove(CalDavConnector.MYBERKELEY_REQUIRED);
      this.adminConnector.putCalendar(optional, OWNER);

      Calendar overdue = buildOverdueTask("Overdue thing");
      this.adminConnector.putCalendar(overdue, OWNER);

    } catch (IOException ioe) {
      LOGGER.error("Trouble contacting server", ioe);
    }
  }

}
